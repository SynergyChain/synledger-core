/**
 * @file ecdsa.hpp
 * @brief Elliptic Curve Digital Signature Algorithm (ECDSA) utilities for SynLedger.
 *
 * This header defines the ECDSA class, which provides cryptographic functions for key generation,
 * message signing, and signature verification using the ECDSA scheme. These operations are integral 
 * to ensuring the authenticity and integrity of transactions in the blockchain. ECDSA provides strong 
 * cryptographic guarantees while maintaining efficiency, making it ideal for decentralized environments.
 */

#ifndef ECDSA_HPP
#define ECDSA_HPP

#include <string>
#include <utility>  // For std::pair

/**
 * @class ECDSA
 * @brief Implements ECDSA-based cryptographic operations for key management, signing, and verification.
 *
 * The ECDSA class provides methods to generate a key pair (public and private keys), sign messages, 
 * and verify signatures. These operations are essential to the cryptographic infrastructure of the 
 * blockchain, ensuring that only authorized transactions are processed and that data integrity is preserved.
 */
class ECDSA {
public:
    /**
     * @brief Generates an ECDSA key pair (private key and corresponding public key).
     * 
     * This method generates a new elliptic curve key pair, used for signing and verifying messages 
     * within the blockchain. The private key is used to sign transactions, while the public key is shared 
     * with others for signature verification.
     * 
     * @return A pair of strings containing the private key and public key.
     */
    static std::pair<std::string, std::string> generate_key_pair();

    /**
     * @brief Signs a message using the given private key.
     * 
     * This method generates an ECDSA signature for the specified message using the provided private key. 
     * The resulting signature can be verified by any party that has the corresponding public key, ensuring 
     * that the message has not been altered and originates from the holder of the private key.
     * 
     * @param message The message to be signed.
     * @param private_key The private key used to sign the message.
     * @return A string representing the generated signature.
     */
    static std::string sign_message(const std::string& message, const std::string& private_key);

    /**
     * @brief Verifies the signature of a message.
     * 
     * This method checks the validity of a signature by verifying that it was generated by the private key 
     * corresponding to the provided public key. If the signature is valid, it confirms that the message has 
     * not been tampered with and is authentic.
     * 
     * @param message The message whose signature is to be verified.
     * @param signature The ECDSA signature to verify.
     * @param public_key The public key associated with the private key that signed the message.
     * @return True if the signature is valid, false otherwise.
     */
    static bool verify_signature(const std::string& message, const std::string& signature, const std::string& public_key);
};

#endif // ECDSA_HPP

/**
 * @file ecdsa.hpp
 * 
 * This module provides critical cryptographic functionality for managing keys, signing, and verifying transactions 
 * using ECDSA. The use of elliptic curve cryptography offers a balance of strong security and efficient performance, 
 * making it suitable for the high-security demands of the SynLedger blockchain. ECDSA ensures that only legitimate 
 * transactions are accepted and prevents tampering through cryptographic verification.
 */
